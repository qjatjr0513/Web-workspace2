/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.67
 * Generated at: 2022-10-30 07:30:02 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Ajax개요</title>\r\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.1/jquery.min.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<h1>AJAX 개요</h1>\r\n");
      out.write("	\r\n");
      out.write("	<p>\r\n");
      out.write("		Asynchronous JavaScript And XML의 약자로 <br>\r\n");
      out.write("		서버로부터 데이터를 가져와 전체 페이지를 새로 고치지 않고 일부만 로드할 수 있게 하는 기법<br>\r\n");
      out.write("		우리가 기존에 a 태그로 요청 및 form을 통해 요청했던 방식은 비동기식 요청방식<br>\r\n");
      out.write("		=> 응답페이지가 돌아와야 볼 수 있음(페이지화면 깜박거림)<br>\r\n");
      out.write("		비동기식 요청을 보내기 위해서는 AJAX라는 기술이 필요함<br><br>\r\n");
      out.write("\r\n");
      out.write("		* 동기식 / 비동기식 <br>\r\n");
      out.write("		- 동기식 : 요청 처리 후 그에 해당하는 응답 페이지가 돌아와야만 그 다음 작업 가능<br>\r\n");
      out.write("		만약 서버에서 호출된 결과까지 시간이 지연되면 무작정 계속 기다려야함(한 화면으로 보이게 됨)<br>\r\n");
      out.write("		전체 페이지가 리로드됨(새로고침 즉, 페이지가 기본적으로 깜박거림)<br><br>\r\n");
      out.write("\r\n");
      out.write("		- 비동기식 : 현재 페이지를 그대로 유지하면서 중간중간마다 추가적인 요청을 보내줄수 있음<br>\r\n");
      out.write("		요청을 한다고 해서 다른 페이지로 넘어가지 않음(현재페이지 그대로)<br>\r\n");
      out.write("		요청을 보내놓고 그에 해당하는 응답이 돌아올때 까지 현재페이지에서 다른 작업을 할 수 있음(페이지 깜박거리지 않음)<br>\r\n");
      out.write("		예) 네이버 홈페이지 실시간 검색기능 or 검색어 자동완성기능 or 아이디 중복체크 기능.<br><br>\r\n");
      out.write("\r\n");
      out.write("		* 비동기식의 단점 <br>\r\n");
      out.write("		- 현재 페이지에 지속적으로 리소스가 쌓임 -> 페이지가 느려질수 있음.<br>\r\n");
      out.write("		- 페이지내 복잡도가 기하급수적으로 증가 => 에러발생시 대처가 어려워짐<br>\r\n");
      out.write("		- 요청후 들어온 응답데이터를 가지고 현재페이지에서 새로운 요소를 만들어서 뿌려줘야됨.\r\n");
      out.write("			=> DOM요소를 새로이 만들어내는 구문을 잘 숙지하고있어야함<br><br>\r\n");
      out.write("\r\n");
      out.write("	</p>\r\n");
      out.write("\r\n");
      out.write("	<h1>JavaScript 방식을 이용한 AJAX 테스트</h1>\r\n");
      out.write("\r\n");
      out.write("	<h3>1. 버튼 클릭시 get방식으로 서버에 데이터 전송 및 응답</h3>\r\n");
      out.write("\r\n");
      out.write("	<h3>자바스크립트를 이용한 ajax통신</h3>\r\n");
      out.write("\r\n");
      out.write("	<button onclick=\"ajaxTest1();\">javascript ajax 테스트 1</button>\r\n");
      out.write("\r\n");
      out.write("	<h3>2. 버튼 클릭시 post방식으로 서버에 데이터 전송 및 응답 </h3>\r\n");
      out.write("\r\n");
      out.write("	<button onclick=\"ajaxTest2();\">javascript ajax 테스트 2(POST방식)</button>\r\n");
      out.write("\r\n");
      out.write("	<div id=\"target\"></div>\r\n");
      out.write("\r\n");
      out.write("	<script>\r\n");
      out.write("\r\n");
      out.write("		const ajaxTest1 = () => {\r\n");
      out.write("			// ajax로 서버와 통신하기.\r\n");
      out.write("			// 1. XMLHttpRequest 객체 생성하기.\r\n");
      out.write("			const xhr = new XMLHttpRequest();\r\n");
      out.write("\r\n");
      out.write("			// 2. XMLHttpRequest 객체를 설정하기.\r\n");
      out.write("			// open() 함수를 이용해서 통신값을 설정하기.\r\n");
      out.write("			// 1 : 방식(get, post) / 2: 요청을 보내는 주소 / [3 : 동기식, 비동기식 설정]\r\n");
      out.write("			// * 클라이언트가 보내는 값을 파라미터로 전송.\r\n");
      out.write("			xhr.open(\"get\", \"");
      out.print(request.getContextPath());
      out.write("/ajaxTest.do?id=admin\");\r\n");
      out.write("			// 3. 요청에 대한 서버응답을 처리할 함수를 지정.\r\n");
      out.write("			// xhr 객체의 onreadystatechange속성에 함수를 대입\r\n");
      out.write("			// xhr 객체 내부의 상태를 관리하는 속성\r\n");
      out.write("			// 1) readyState : 전송상태를 관리\r\n");
      out.write("			// 2) status : 응답결과 관리\r\n");
      out.write("			xhr.onreadystatechange = () => {\r\n");
      out.write("				if(xhr.readyState == 4){// 4는 정상적으로 응답을 받았을 때 전송되는 값(기본값은 0)\r\n");
      out.write("\r\n");
      out.write("					if(xhr.status == 200){\r\n");
      out.write("						// 응답메세지를 정상적으로 수신.\r\n");
      out.write("						// 서버가 응답한 내용은 xhr 객체의 responseText 속성에 자동으로 들어감.\r\n");
      out.write("						console.log(xhr.responseText);\r\n");
      out.write("						document.getElementById(\"target\").innerHTML += \"<h3>\"+xhr.responseText+\"</h3>\";\r\n");
      out.write("					}\r\n");
      out.write("					else if(xhr.status == 404){\r\n");
      out.write("						alert(\"찾는 페이지가 존재하지 않습니다.\");\r\n");
      out.write("					}else{\r\n");
      out.write("						alert(\"에러가 발생했습니다.\");\r\n");
      out.write("					}\r\n");
      out.write("				}\r\n");
      out.write("			}\r\n");
      out.write("\r\n");
      out.write("			// 모든 값에 대한 설정을 완료한 후 요청을 전송.\r\n");
      out.write("			xhr.send();\r\n");
      out.write("		};\r\n");
      out.write("		\r\n");
      out.write("		const ajaxTest2 = () => {\r\n");
      out.write("			\r\n");
      out.write("			const xhr = new XMLHttpRequest();\r\n");
      out.write("			\r\n");
      out.write("			xhr.open(\"post\", \"");
      out.print(request.getContextPath());
      out.write("/ajaxTest.do\");\r\n");
      out.write("\r\n");
      out.write("			xhr.onreadystatechange = () => {\r\n");
      out.write("\r\n");
      out.write("				if(xhr.readyState == 4){ // 성공적으로 전송\r\n");
      out.write("\r\n");
      out.write("					if(xhr.status == 200){ // 성공적으로 응답을 받음\r\n");
      out.write("						document.getElementById(\"target\").innerHTML += \"<h4>\"+xhr.responseText+\"</h4>\";\r\n");
      out.write("					}\r\n");
      out.write("				}\r\n");
      out.write("\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			// post 방식으로 데이터 전송시 파라미터 설정 방법\r\n");
      out.write("			// url 데이터 내용을 작성하지 않고, send 함수의 매개변수로 작성.\r\n");
      out.write("			// 전송방식도 수정해야됨.\r\n");
      out.write("			\r\n");
      out.write("			xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n");
      out.write("			xhr.send(\"id=user01\");\r\n");
      out.write("		}\r\n");
      out.write("	</script>\r\n");
      out.write("	\r\n");
      out.write("	<pre>\r\n");
      out.write("		* jQuery 방식에서의 AJAX 통신\r\n");
      out.write("		\r\n");
      out.write("		$.ajax({\r\n");
      out.write("			속성명:속성값,\r\n");
      out.write("			속성명:속성값,\r\n");
      out.write("			속성명:속성값\r\n");
      out.write("			...\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		* 주요속성\r\n");
      out.write("		- url : 요청할 url(필수)\r\n");
      out.write("		- type|method : 요청전송방식(get/post, 생략시 기본값 get)\r\n");
      out.write("		- data : 요청을 전달할 값\r\n");
      out.write("		- success : ajax 통신 성공시 실행할 함수를 정의.\r\n");
      out.write("		- error : ajax 통신 실패시 실행할 함수 정의.\r\n");
      out.write("		- complete : ajax 통신 실패했든, 성공했든 무조건 실행할 함수 정의\r\n");
      out.write("		\r\n");
      out.write("		* 부수적인 속성\r\n");
      out.write("		- async : 서버와의 비동기 처리방식 설정 여부(기본값 true) \r\n");
      out.write("		- contentType :  request의 데이터 인코딩 방식 정의(보내는 측에 데이터 인코딩)\r\n");
      out.write("		- dataType : 서버에서 response로 오는 데이터의 데이터 형설정, 값이 없다면 알아서 판단함.\r\n");
      out.write("					xml : 트리형태의 구조\r\n");
      out.write("					json : 맵 형태의 구조(일반적인 데이터구조)\r\n");
      out.write("					script : javascript 및 일반 String 형태의 데이터\r\n");
      out.write("					html : html 태그 자체를 return 하는 방식\r\n");
      out.write("					text : String데이터\r\n");
      out.write("		- accept : 파라미터 타입 설정(사용자 특화된 파라미터 타입 설정 가능)\r\n");
      out.write("		- beforeSend : ajax 요청을 하기전 실행되는 이벤트 callback 함수(데이터 가공 및 header관련 설정)\r\n");
      out.write("		- cache : 요청 및 결과값을 scope에서 갖고있지 않도록 하는것(기본값 true)\r\n");
      out.write("		- contents : jQuery에서 response의 데이터를 파싱하는 방식 정의\r\n");
      out.write("		- crossDomain : 타 도메인 호출 가능 여부 설정(기본값 false)\r\n");
      out.write("		- dataFilter : response데이터를 받았을때 정상적인 값을 return 할 수 있도록 데이터와 데이터 타입 설정\r\n");
      out.write("		- global : 기본 이벤트 사용여부(ajaxStart, ajaxStop) => 버퍼링 같이 시작과 끝을 나타낼때, 선처리 작업시 사용\r\n");
      out.write("		- password : 서버에 접속권한이 필요한 경우 설정.\r\n");
      out.write("		- processData : 서버로 보내는 값에 대한 형태 설정 여부(기본 데이터를 원하는 경우 false 설정)\r\n");
      out.write("		- timeout : 서버요청시 응답 대기시간(ms로 설정)\r\n");
      out.write("	</pre>\r\n");
      out.write("	\r\n");
      out.write("	<h1>jQuery 방식을 이용한 AJAX 테스트</h1>\r\n");
      out.write("	<h3>1. 버튼 클릭시 get 방식으로 서버에 데이터 전송 및 응답</h3>\r\n");
      out.write("	\r\n");
      out.write("	입력 : <input type=\"text\" id=\"input1\">\r\n");
      out.write("	<button id=\"btn1\">전송</button>\r\n");
      out.write("	<br>\r\n");
      out.write("	\r\n");
      out.write("	응답 : <label id=\"output1\">현재 응답 없음</label>\r\n");
      out.write("	\r\n");
      out.write("	<script>\r\n");
      out.write("	\r\n");
      out.write("		$(function(){\r\n");
      out.write("			\r\n");
      out.write("			$(\"#btn1\").click(function(){\r\n");
      out.write("				// 기존의 동기식 방식\r\n");
      out.write("				// location.href = '/ajax/url.do?input='+$(\"#input1\").val();\r\n");
      out.write("				// 404 에러 발생할 것\r\n");
      out.write("	\r\n");
      out.write("				// 비동기식 통신(페이지가 전환되지 않기 때문에 에러 발생하지 않음)\r\n");
      out.write("				$.ajax({\r\n");
      out.write("					url : \"jqAjax1.do\",\r\n");
      out.write("					data : {input : $(\"#input1\").val()},\r\n");
      out.write("					type : \"get\",\r\n");
      out.write("					success : function(result){// 익명함수, 매개변수로 서블릿으로부터 전달받은 값\r\n");
      out.write("						console.log(result);\r\n");
      out.write("						$(\"#output1\").text(result);\r\n");
      out.write("					},\r\n");
      out.write("					error : function(){\r\n");
      out.write("						console.log(\"ajax통신 실패!\");\r\n");
      out.write("					},\r\n");
      out.write("					complete : function(){\r\n");
      out.write("						console.log(\"ajax 통신 여부와 상관없이 항상 실행될 것.\")\r\n");
      out.write("					}\r\n");
      out.write("					\r\n");
      out.write("	\r\n");
      out.write("				})\r\n");
      out.write("			});\r\n");
      out.write("		})\r\n");
      out.write("	</script>\r\n");
      out.write("	\r\n");
      out.write("	<hr>\r\n");
      out.write("	<br>\r\n");
      out.write("\r\n");
      out.write("	<h3>2. 버튼클릭시 post 방식으로 서버에 데이터 전송 및 응답</h3>\r\n");
      out.write("\r\n");
      out.write("	이름 : <input type=\"text\" id=\"input2_1\"><br>\r\n");
      out.write("	나이 : <input type=\"number\" id=\"input2_2\"> <br>\r\n");
      out.write("	<button onclick=\"test2();\">전송</button>\r\n");
      out.write("	<br>\r\n");
      out.write("\r\n");
      out.write("	응답 : <label id=\"output2\">현재 응답 없음</label>\r\n");
      out.write("	\r\n");
      out.write("	<script>\r\n");
      out.write("	// 버전 1) 데이터 문자열 응답 방식\r\n");
      out.write("	// script\r\n");
      out.write("// 		function test2(){\r\n");
      out.write("\r\n");
      out.write("// 			$.ajax({\r\n");
      out.write("// 				url : \"jqAjax2.do\",\r\n");
      out.write("// 				data : {\r\n");
      out.write("// 					name : $(\"#input2_1\").val(),\r\n");
      out.write("// 					age : $(\"#input2_2\").val()\r\n");
      out.write("// 				},\r\n");
      out.write("// 				type : \"post\",\r\n");
      out.write("// 				success : function(result){\r\n");
      out.write("// 					$(\"#output2\").text(result);\r\n");
      out.write("\r\n");
      out.write("// 					// 입력값을 초기화\r\n");
      out.write("// 					$(\"#input2_1\").val(\"\");\r\n");
      out.write("// 					$(\"#input2_2\").val(\"\");\r\n");
      out.write("// 				},\r\n");
      out.write("// 				error : function(){\r\n");
      out.write("// 					console.log(\"통신 실패\");\r\n");
      out.write("// 				}\r\n");
      out.write("// 			});\r\n");
      out.write("// 		}\r\n");
      out.write("\r\n");
      out.write("	/* 버전 2) JSON 데이터 응답방식 */\r\n");
      out.write("		\r\n");
      out.write("		function test2(){\r\n");
      out.write("		\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				url : \"jqAjax2.do\",\r\n");
      out.write("				data : {\r\n");
      out.write("					name : $(\"#input2_1\").val(),\r\n");
      out.write("					age : $(\"#input2_2\").val()\r\n");
      out.write("				},\r\n");
      out.write("				type : \"post\",\r\n");
      out.write("				success : function(result){\r\n");
      out.write("					//$(\"#output2\").text(result);\r\n");
      out.write("					console.log(result);\r\n");
      out.write("					// JSONArray로 응답받을 경우\r\n");
      out.write("					// []\r\n");
      out.write("					//$(\"#output2\").text(\"이름 : \"+result[0]+\", 나이 : \"+result[1]);\r\n");
      out.write("					\r\n");
      out.write("					// JSONObject로 응답받을 경우\r\n");
      out.write("					$(\"#output2\").text(\"이름 : \"+result.name+\", 나이 : \"+result[\"age\"]);\r\n");
      out.write("					\r\n");
      out.write("					// 입력값을 초기화\r\n");
      out.write("					$(\"#input2_1\").val(\"\");\r\n");
      out.write("					$(\"#input2_2\").val(\"\");\r\n");
      out.write("				},\r\n");
      out.write("				error : function(){\r\n");
      out.write("					console.log(\"통신 실패\");\r\n");
      out.write("				}\r\n");
      out.write("			});\r\n");
      out.write("		}\r\n");
      out.write("	</script>\r\n");
      out.write("	\r\n");
      out.write("	<h3>3. 서버로 데이터 전송 후, 조회된 객체를 응답데이터로 받기</h3>\r\n");
      out.write("	\r\n");
      out.write("	회원 번호 입력 : <input type=\"number\" id=\"input3\">\r\n");
      out.write("	<button onclick=\"test3()\">조회</button>\r\n");
      out.write("\r\n");
      out.write("	<div id=\"output3\"></div>\r\n");
      out.write("\r\n");
      out.write("	<script>\r\n");
      out.write("		function test3(){\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				url : \"jqAjax3.do\",\r\n");
      out.write("				data : {no : $(\"#input3\").val()},\r\n");
      out.write("				success : function(result){\r\n");
      out.write("					\r\n");
      out.write("					console.log(result);\r\n");
      out.write("					\r\n");
      out.write("					let resultStr = \"회원번호 : \"+result.memberNo+\"<br>\"\r\n");
      out.write("									+ \"이름 : \"+result.memberName+\"<br>\"\r\n");
      out.write("									+ \"나이 : \"+result.age+\"<br>\"\r\n");
      out.write("									+ \"성별 : \"+result.gender+\"<br>\";\r\n");
      out.write("					$(\"#output3\").html(resultStr);\r\n");
      out.write("				},\r\n");
      out.write("				error : function(request, status, error){\r\n");
      out.write("					console.log(request, status, error);\r\n");
      out.write("				}\r\n");
      out.write("\r\n");
      out.write("			})\r\n");
      out.write("		}\r\n");
      out.write("	</script>\r\n");
      out.write("	\r\n");
      out.write("	<h3>4. 응답 데이터로 여러개의 객체들이 담겨있는 ArrayList 받기</h3>\r\n");
      out.write("	<button onclick=\"test4();\">회원 전체조회</button>\r\n");
      out.write("	\r\n");
      out.write("	<table id=\"output4\" border = \"1\" style = \"text-align:center\">\r\n");
      out.write("		<thead>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th>번호</th>\r\n");
      out.write("				<th>이름</th>\r\n");
      out.write("				<th>나이</th>\r\n");
      out.write("				<th>성별</th>\r\n");
      out.write("			</tr>\r\n");
      out.write("		</thead>\r\n");
      out.write("		<tbody>\r\n");
      out.write("		\r\n");
      out.write("		</tbody>\r\n");
      out.write("	</table>\r\n");
      out.write("	\r\n");
      out.write("	<script>\r\n");
      out.write("		function test4(){\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				url: \"jqAjax4.do\",\r\n");
      out.write("				success : function(result){\r\n");
      out.write("					\r\n");
      out.write("					let str = \"\";\r\n");
      out.write("					\r\n");
      out.write("					for(let i=0; i< result.length; i++){						\r\n");
      out.write("					str += \"<tr>\"\r\n");
      out.write("								+\"<td>\"+ result[i].memberNo +\"</td>\"\r\n");
      out.write("								+\"<td>\"+ result[i].memberName +\"</td>\"\r\n");
      out.write("								+\"<td>\"+ result[i].age +\"</td>\"\r\n");
      out.write("								+\"<td>\"+ result[i].gender +\"</td>\"\r\n");
      out.write("					str + \"</tr>\";\r\n");
      out.write("					}\r\n");
      out.write("					\r\n");
      out.write("					$(\"#output4 tbody\").html(str);\r\n");
      out.write("					\r\n");
      out.write("				},\r\n");
      out.write("				error : function(req, status, err){\r\n");
      out.write("					console.log(req, status, err);\r\n");
      out.write("				}\r\n");
      out.write("			});\r\n");
      out.write("		}\r\n");
      out.write("	</script>\r\n");
      out.write("	\r\n");
      out.write("	<h2>5. ajax를 이용한 자동완성 구현하기</h2>\r\n");
      out.write("	<input id=\"keyword\" list=\"list\" type=\"text\" placeholder=\"찾을 게시글을 작성하세요.\">\r\n");
      out.write("	<datalist id=\"list\">\r\n");
      out.write("	</datalist>\r\n");
      out.write("\r\n");
      out.write("	<script>\r\n");
      out.write("\r\n");
      out.write("		$(function(){\r\n");
      out.write("\r\n");
      out.write("			$(\"#keyword\").keyup(function(e){\r\n");
      out.write("				$.ajax({\r\n");
      out.write("					url : \"jqAutoSearch.do\", \r\n");
      out.write("					data : {keyword : $(e.target).val()},\r\n");
      out.write("					//data : {keyword : $(\"#keyword\").val()},\r\n");
      out.write("					success : function(data){\r\n");
      out.write("						\r\n");
      out.write("						$(\"#list\").html(\"\"); // 리스트 비워주기\r\n");
      out.write("\r\n");
      out.write("						let str = \"\";\r\n");
      out.write("						for(let i = 0; i<data.length; i++){\r\n");
      out.write("							str += \"<option>\"\r\n");
      out.write("								+ data[i].boardTitle\r\n");
      out.write("								+ \"</option>\"\r\n");
      out.write("						}\r\n");
      out.write("						$(\"#list\").html(str);\r\n");
      out.write("					}\r\n");
      out.write("				});\r\n");
      out.write("			});\r\n");
      out.write("\r\n");
      out.write("		})\r\n");
      out.write("	</script>\r\n");
      out.write("	\r\n");
      out.write("	<h2>6. Ajax로 html 파일 받아오기</h2>\r\n");
      out.write("\r\n");
      out.write("	<button id=\"htmlAjax\">html 문서 받기</button>\r\n");
      out.write("	\r\n");
      out.write("	<div></div>\r\n");
      out.write("\r\n");
      out.write("	<script>\r\n");
      out.write("		$(function(){\r\n");
      out.write("			$(\"#htmlAjax\").click(function(){\r\n");
      out.write("				$.ajax({\r\n");
      out.write("					url :\"");
      out.print( request.getContextPath());
      out.write("/jqHtmlTest.do\",\r\n");
      out.write("					type : \"get\",\r\n");
      out.write("					dataType : \"html\",\r\n");
      out.write("					success : function(data){\r\n");
      out.write("						console.log(data); // <!DOCTYPE ~ HTML\r\n");
      out.write("						$(\"#htmlAjax+div\").html(data);\r\n");
      out.write("					}\r\n");
      out.write("				})\r\n");
      out.write("			})\r\n");
      out.write("		});\r\n");
      out.write("	</script>\r\n");
      out.write("	\r\n");
      out.write("	<h2>7. xml 데이터 가져오기</h2>\r\n");
      out.write("	<button id=\"xmlTest\">xml 데이터 가져오기기</button>\r\n");
      out.write("\r\n");
      out.write("	<div id=\"fiction\">\r\n");
      out.write("		<h2>소설</h2>\r\n");
      out.write("		<table id=\"fiction-info\">\r\n");
      out.write("\r\n");
      out.write("		</table>\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("	<div id=\"it\">\r\n");
      out.write("		<h2>프로그래밍</h2>\r\n");
      out.write("		<table id=\"it-info\">\r\n");
      out.write("			\r\n");
      out.write("		</table>\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("	<script>\r\n");
      out.write("		$(function(){\r\n");
      out.write("			$(\"#xmlTest\").click( () => {\r\n");
      out.write("				$.ajax({\r\n");
      out.write("					url : \"books.xml\",\r\n");
      out.write("					success : data => {\r\n");
      out.write("						let ficheader = \"<tr><th>제목</th><th>저자</th></tr>\";\r\n");
      out.write("						let itheader = ficheader;\r\n");
      out.write("\r\n");
      out.write("						console.log(data);\r\n");
      out.write("\r\n");
      out.write("						let entity = $(data).find(\":root\"); // 데이터를 유동적으로 가져오는 방법 => :root\r\n");
      out.write("						console.log(entity);\r\n");
      out.write("						let books = $(entity).find(\"book\"); // let books = $(entity).children(); 같은 결과 \r\n");
      out.write("						console.log(books);\r\n");
      out.write("\r\n");
      out.write("						books.each(function(index, value){// jsp 는 (index, value) 순으로 작성 javascript는 (value index)순으로 작성\r\n");
      out.write("							let info = \"<tr><td>\"+$(value).find(\"title\").text()+\"</td>\"\r\n");
      out.write("										+\"<td>\"+$(value).find(\"author\").text()+\"</td></td>\"\r\n");
      out.write("\r\n");
      out.write("							let subject = $(value).find(\"subject\").text();\r\n");
      out.write("							if(subject == \"소설\"){\r\n");
      out.write("								ficheader += info;\r\n");
      out.write("							}else if(subject == \"프로그래밍\"){\r\n");
      out.write("								itheader += info;\r\n");
      out.write("							}\r\n");
      out.write("						});\r\n");
      out.write("\r\n");
      out.write("						$(\"#fiction-info\").html(ficheader);\r\n");
      out.write("						$(\"#it-info\").html(itheader);\r\n");
      out.write("\r\n");
      out.write("					}\r\n");
      out.write("				})\r\n");
      out.write("\r\n");
      out.write("			})\r\n");
      out.write("\r\n");
      out.write("		})\r\n");
      out.write("	</script>\r\n");
      out.write("	\r\n");
      out.write("	<h2>8. Ajax를 이용한 파일 업로드 처리하기</h2>\r\n");
      out.write("	<input type=\"file\" id=\"upfile\" multiple>\r\n");
      out.write("	<button onclick=\"sendFile();\">파일전송</button>\r\n");
      out.write("\r\n");
      out.write("	<script>\r\n");
      out.write("		function sendFile(){\r\n");
      out.write("			// 파일 전송시 form 태그가 작성되지 않으면 FormData 객체를 생성해서 전달해야함\r\n");
      out.write("			let form = new FormData(); \r\n");
      out.write("\r\n");
      out.write("			//form.append(\"upfile\",$(\"#upfile\")[0].files[0]); // 전송하고자 하는 파일이 한개밖에 없을 때 사용하는 방법\r\n");
      out.write("			//console.log($(\"#upfile\")[0], $(\"#upfile\")[0].files[0]);\r\n");
      out.write("			$.each($(\"#upfile\")[0].files , function(index, file){\r\n");
      out.write("				console.log(index, file);\r\n");
      out.write("				form.append(\"upfile\"+index, file);\r\n");
      out.write("			});\r\n");
      out.write("			form.append(\"name\", \"이범석\");\r\n");
      out.write("\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				url : \"fileUpload.do\",\r\n");
      out.write("				data : form,\r\n");
      out.write("				type : \"post\",\r\n");
      out.write("				contentType : false,\r\n");
      out.write("				processData : false,\r\n");
      out.write("				success : function(data){\r\n");
      out.write("					alert(\"업로드 성공\");\r\n");
      out.write("					$(\"#upflie\").val(\"\");\r\n");
      out.write("				}\r\n");
      out.write("			})\r\n");
      out.write("		}\r\n");
      out.write("	</script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
